;PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
; default_envs = build
libdeps_dir = /tmp/libdeps

[env]
framework = arduino
build_flags = 
  ; -include "src/PMmodulHardware.h"
  # put preprocessor output into object file directory
  ; -save-temps=obj
  ; -fverbose-asm
  ; optimize knx stack
  -D SMALL_GROUPOBJECT
  ; -D USE_BINSEARCH
  ; -D KNX_AUTO_ADAPT
  ; -D KNX_WAIT_FOR_ADDR
  -D MASK_VERSION=0x07B0
  ; use flash directly
  ;flash start at 1.5MiB
  ; -D USERDATA_SAVE_SIZE=1004
  ; use EEPROM emulation
  ;-D DEBUG_TIMING
  ;-D LOGIC_TRACE
  -Wno-unknown-pragmas 
  -Wno-switch
  ; debug timing in knx stack
monitor_speed = 115200
lib_ldf_mode = deep+
; lib_extra_dirs = 
;   ${PROJECT_DIR}\..
debug_tool = jlink
debug_extra_cmds = 
  set output-radix 16
upload_protocol = jlink

[RP2040]
platform = raspberrypi
; platform = https://github.com/maxgerhardt/platform-raspberrypi.git
board = pico
; board can use both Arduino cores -- we select Arduino-Pico here
board_build.core = earlephilhower
; board_build.filesystem_size = 0.1m
; platform_packages = 
;   ; framework-arduinopico@https://github.com/earlephilhower/arduino-pico.git#2.3.2
;   framework-arduinopico@https://github.com/earlephilhower/arduino-pico.git

build_flags =
  ${env.build_flags}
  -D SERIAL_DEBUG=Serial
  -D KNX_FLASH_SIZE=0x8000
  -D KNX_FLASH_OFFSET=0x180000 
  -D SMALL_GROUPOBJECT
  ; -D USE_RP2040_EEPROM_EMULATION
  ; -D USE_RP2040_LARGE_EEPROM_EMULATION
  -D PIO_FRAMEWORK_ARDUINO_ENABLE_RTTI
  -D LWIP_DONT_PROVIDE_BYTEORDER_FUNCTIONS
  -O0

build_unflags = -Os

lib_deps = 
  adafruit/Adafruit SleepyDog Library @ ^1.4.0
  https://github.com/SnijderC/dyplayer.git
  
; ;   Wire
; ;   SPI
build_type = debug
;debug_build_flags = -O0 -ggdb3
;debug_build_flags = -O0 -ggdb3
; debug_build_flags = -ggdb3

[RP2040_develop]
build_flags =
  -D DEBUG_DELAY=5000
  -D BI_DEBUG=1

[env:build_MASIFI_SMBB_V1]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  ${RP2040_develop.build_flags}
  -D BOARD_MASIFI_SMBB_V1
  
[env:build_SOM_UP]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  -D BOARD_SOM_UP
  -D DEBUG_DELAY=100

[env:upload_USB_MASIFI_SMBB_V1]
extends = RP2040
build_flags = 
  ${RP2040.build_flags} 
  ${RP2040_develop.build_flags}
  -D BOARD_MASIFI_SMBB_V1
; upload_protocol = picotool
upload_protocol = mbed
; upload_protocol = jlink
; debug_tool = jlink

[env:upload_USB_SOM_UP]
extends = RP2040
build_flags = 
  ${RP2040.build_flags}
  -D BOARD_SOM_UP
  -D DEBUG_DELAY=100
; upload_protocol = picotool
upload_protocol = mbed
; upload_protocol = jlink
; debug_tool = jlink

; [env:release_PiPico_BCU_Connector]
; extends = RP2040
; build_flags =
;   ${RP2040.build_flags}
;   -D DEBUG_DELAY=10000
;   -D BOARD_SIRSYDOM_PIPICO_BCU_CONNECTOR

; [env:release_1TE_RP2040_SmartMF]
; extends = RP2040
; build_flags =
;   ${RP2040.build_flags}
;   -D DEBUG_DELAY=10000
;   -D BOARD_SMARTMF_1TE_RP2040

; [env:release_OpenKNX_REG1_Base]
; extends = RP2040
; build_flags =
;   ${RP2040.build_flags}
;   -D DEBUG_DELAY=10000
;   -D BOARD_OPENKNX_REG1_BASE
